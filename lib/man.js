"use strict";

var ast = require('mkast')
  , Node = ast.Node
  , Renderer = ast.Renderer
  , manual = require('manual')
  , prefix = require('./prefix-lines')
  , normalize = require('./normalize')
  , Links = require('./links')
  , repeat = require('string-repeater');

var macros = {
  // newline with no vertical space
  nl: '.de nl\n.sp 0\n..\n',

  // thematic break
  hr: '.de hr\n.sp 1\n.nf\n.ce\n.in 4\n\\l’80’\n.fi\n..\n',

  // heading macros h1-h6
  h1: '.de h1\n.RE\n.sp 1\n\\fB\\\\$1\\fR\n.RS 4\n..\n',
  h2: '.de h2\n.RE\n.sp 1\n.in 4\n\\fB\\\\$1\\fR\n.RS 6\n..\n',
  h3: '.de h3\n.RE\n.sp 1\n.in 6\n\\fB\\\\$1\\fR\n.RS 8\n..\n',
  h4: '.de h4\n.RE\n.sp 1\n.in 8\n\\fB\\\\$1\\fR\n.RS 10\n..\n',
  h5: '.de h5\n.RE\n.sp 1\n.in 10\n\\fB\\\\$1\\fR\n.RS 12\n..\n',
  h6: '.de h6\n.RE\n.sp 1\n.in 12\n\\fB\\\\$1\\fR\n.RS 14\n..\n',
}

/**
 *  Renders an abstract syntax tree to a ROFF man page.
 *
 *  @constructor ManRenderer
 *  @param {Object} [opts] processing options.
 */
function ManRenderer(opts) {
  opts = opts || {};
  Renderer.call(this);

  // automatically convert links to numbered references
  this.autolink = opts.autolink !== undefined ? opts.autolink : true;

  // list of links encountered during the render
  this.links = new Links();

  this.opts = opts;
  this.newline = opts.newline || '\n.nl';
  this.section = opts.section || '1';
  this.title = opts.title || 'UNTITLED';
  this.preambleVersion = opts.preambleVersion;
  this.description = opts.description || '';
  this.locale = opts.locale || 'en-gb';

  this.date = opts.date || this.getHumanDate(new Date());

  this.blockquote = '|';

  // how to treat inline code, may be `emph` or `strong`
  // any other results in no formatting for inline code
  this.inline = opts.inline !== undefined ? opts.inline : Node.STRONG;

  // force inclusion of inline and block HTML when set
  this.html = opts.html !== undefined ? opts.html : false;

  // has the preamble been sent, do not re-send for nested documents
  this.sent = false;
}

function getHumanDate(d) {
  return (d.toLocaleString(this.locale, {month: 'long'})
    + ', ' + d.toLocaleString(this.locale, {year: 'numeric'}));
}

function document(node, entering) {
  if(entering && !this.sent) {

    var opts = {
      title: this.title,
      version: this.preambleVersion,
      section: this.section,
      description: this.description,
      comment: 'Generated by mkdoc on ' + this.getHumanDate(new Date()),
      date: this.date
    }

    var preamble = manual.preamble(opts);

    this.out(preamble);

    var keys = Object.keys(macros)
      , i
      , macro;

    // add macros
    for(i = 0;i < keys.length;i++) {
      macro = macros[keys[i]];
      if(i === keys.length - 1) {
        macro = macro.replace(/\n$/, ''); 
      }
      this.out(macro); 
    }

    this.sent = true;
  }else{
    if(this.links.length) {
      this.thematic_break(node, entering);
      this.out('\n');
      //this.cr();
      // print link references by index
      this.out(this.links.list(this.newline + '\n'));
    }
  }
}

function text(node) {

  // required to show inline backslashes, eg: '`\fB`'
  var str = node.literal.replace(/[\\\\]{1,1}/g, '\\\\');

  str = manual.sanitize(str, false);

  if(!this.autolink) {
    return this.out(str); 
  }

  var p = node.parent
    , grandparent = p ? p.parent : null
    , dest = '';

  // NOTE: this captures link parents when the hierarchy is:
  // NOTE: link > image > text
  while(p) {
    if(Node.is(p, Node.LINK)) {
      dest = p.destination;
      break;
    }
    p = p.parent;
  }

  if(grandparent
    && Node.is(grandparent, Node.ITEM)
    && Node.is(node.parent, Node.PARAGRAPH)
    && node.parent.firstChild !== node) {
    var bullet = grandparent._listData.bulletChar;
    if(bullet === '+') {
      this.out('\n');
      this.out(str);
    }
  }else if(grandparent && Node.is(grandparent, Node.BLOCK_QUOTE)) {
    this.out(prefix(node, str, this.blockquote, true));
  }else if(dest) {
    this.out(str + '[' + (this.links.destinations[dest] + 1) + ']');
  }else{
    this.out(str);
  }
}

function softbreak(node/*, entering*/) {
  var grandparent = node.parent ? node.parent.parent : null;
  // preserve soft line breaks in block quotes
  if(grandparent
    && Node.is(grandparent, Node.BLOCK_QUOTE)) {
    this.cr();
    return; 
  }

  // output single space for soft line breaks unless preserved
  if(node.prev && Node.is(node.prev, Node.TEXT)) {
    if(!/ $/.test(node.prev.literal)) {
      this.out(' '); 
    } 
  }
}

function linebreak() {
  //this.out(this.options.linebreak);
  this.cr();
}

function link(node, entering) {
  // track links in the document, so that they can be printed
  // when the document is closed and so that the `text` handling
  // can append a link index to the literal in the form: link[1]
  if(entering && this.autolink) {
    this.links.add(node);
  }
}

// function image(node, entering) {}

function emph(node, entering) {
  if(entering) {
    this.out('\\fI'); 
  }else{
    this.out('\\fR'); 
  }
}

function strong(node, entering) {
  if(entering) {
    this.out('\\fB'); 
  }else{
    this.out('\\fR'); 
  }
}

function code(node) {
  if(this.inline && typeof this[this.inline] === 'function') {
    this[this.inline](node, true); 
    this.text(node); 
    this[this.inline](node, false); 
  }
}

function paragraph(node, entering) {
  var grandparent = node.parent ? node.parent.parent : null;
  if(grandparent
      && Node.is(grandparent, Node.LIST)
      && grandparent.listTight) {
        return;
  }
  if(entering) {

    // first paragraph in a list item should not be rendered as a paragraph
    // otherwise there is a line break after the list marker
    if(Node.is(node.parent, Node.ITEM) && node.parent.firstChild === node) {
      return; 
    }

    if(!node.parent
      || !Node.is(node.parent, Node.BLOCK_QUOTE)) {
      this.out('\n.P\n');
    }
  }else if(!entering) {
    this.cr();
  }
}

function heading(node, entering) {
  if(entering) {
    this.out('\n.h' + node.level + ' "')
  }else{
    this.out('"');
  }
}

function code_block(node, entering) {
  if(entering) {
    this.out('\n.PP\n.in 10\n');
    this.text(node);
  //}else{
    //this.cr();
  }
}

function thematic_break() {
  this.out('\n.hr');
}

function block_quote(node, entering) {
  if(entering) {
    this.out('\n.PP\n.in 10\n');
  }else{
    this.cr();
  }
}

function list(node, entering) {
  var bullet = node._listData.bulletChar;
  if(bullet !== '+') {
    if(entering) {
      this.out('\n.BL');
    }else{
      this.out('\n.EL');
    }
  }
}

function item(node, entering) {
  var bullet = node._listData.bulletChar;
  if(entering) {
    if(bullet !== '+') {
      this.out('\n.IP "\\[ci]" 4\n');
    }else{
      this.out('\n.TP "\n');
    }
  }else{
    //this.out('\n');
    this.cr();
  }
}

function html_block(node, entering) {
  if(this.html) {
    if(entering) {
      this.text(node);
    }else{
      //this.out('\n');
      this.cr(2);
    }
  }else{
    node.literal = normalize(node.literal);
    this.out('\n.PP');
    this.text(node);
    //this.out('\n');
    this.cr(2);
  }
}

function html_inline(node, entering) {
  if(this.html) {
    if(entering) {
      this.text(node);
    }
  }else{
    node.literal = normalize(node.literal);
    this.text(node);
  }
}

function custom_inline(node, entering) {
  if(entering && node.onEnter) {
    this.out(node.onEnter);
  }else if(!entering && node.onExit) {
    this.out(node.onExit);
  }
}

function custom_block(node, entering) {
  this.custom_inline(node, entering);
  this.cr(2);
}

/* Helper methods */

function cr(amount) {
  if(amount === undefined) {
    this.lit(this.newline);
  }else if(amount) {
    this.lit(repeat(this.newline, amount));
  }
}

function render() {
  // reset so renderer is re-usable
  this.links.reset();
  return Renderer.prototype.render.apply(this, arguments);
}

ManRenderer.prototype = Object.create(Renderer.prototype);

ManRenderer.prototype.render = render;

ManRenderer.prototype.document = document;
ManRenderer.prototype.text = text;
ManRenderer.prototype.html_inline = html_inline;
ManRenderer.prototype.html_block = html_block;
ManRenderer.prototype.softbreak = softbreak;
ManRenderer.prototype.linebreak = linebreak;
ManRenderer.prototype.link = link;
//ManRenderer.prototype.image = image;
ManRenderer.prototype.emph = emph;
ManRenderer.prototype.strong = strong;
ManRenderer.prototype.paragraph = paragraph;
ManRenderer.prototype.heading = heading;
ManRenderer.prototype.code = code;
ManRenderer.prototype.code_block = code_block;
ManRenderer.prototype.thematic_break = thematic_break;
ManRenderer.prototype.block_quote = block_quote;
ManRenderer.prototype.list = list;
ManRenderer.prototype.item = item;
ManRenderer.prototype.custom_inline = custom_inline;
ManRenderer.prototype.custom_block = custom_block;
ManRenderer.prototype.cr = cr;

ManRenderer.prototype.getHumanDate = getHumanDate;

module.exports = ManRenderer;
