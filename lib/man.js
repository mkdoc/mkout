"use strict";

var ast = require('mkast')
  , Node = ast.Node
  , Renderer = ast.Renderer
  , manual = require('manual')
  , repeat = require('string-repeater');

/**
 *  Renders an abstract syntax tree to a ROFF man page.
 *
 *  @constructor ManRenderer
 *  @param {Object} [opts] processing options.
 */
function ManRenderer(opts) {
  opts = opts || {};
  Renderer.call(this);

  this.opts = opts;
  this.newline = opts.newline || '.BR\n';
  this.section = opts.section || '1';
  this.description = opts.description || '';

  // how to treat inline code, may be `emph` or `strong`
  // any other results in no formatting for inline code
  this.inline = opts.inline !== undefined ? opts.inline : Node.STRONG;

  // force inclusion of inline and block HTML when set
  this.html = opts.html !== undefined ? opts.html : false;
}

function document(node, entering) {
  if(entering) {

    var opts = {
      title: this.title || 'UNTITLED',
      section: this.section,
      description: this.description,
      comment: 'Generated by mkdoc on ' + new Date()
    }

    var preamble = manual.preamble(opts);

    this.out(preamble);
  }
}

function text(node) {
  var str = node.literal.replace(/[\\\\]{1,1}/g, '\\\\');
  str = manual.sanitize(str);
  this.lit(str);
}

function softbreak() {
  this.out(' ');
  //this.cr();
}

function linebreak() {
  //this.out(this.options.linebreak);
  this.cr();
}

// function link(node, entering) {}

// function image(node, entering) {}

function emph(node, entering) {
  if(entering) {
    this.out('\\fI'); 
  }else{
    this.out('\\fR'); 
  }
}

function strong(node, entering) {
  if(entering) {
    this.out('\\fB'); 
  }else{
    this.out('\\fR'); 
  }
}

function code(node) {
  if(this.inline && typeof this[this.inline] === 'function') {
    this[this.inline](node, true); 
    this.text(node); 
    this[this.inline](node, false); 
  }
}

function paragraph(node, entering) {
  var grandparent = node.parent ? node.parent.parent : null;
  if(grandparent
      && Node.is(grandparent, Node.LIST)
      && grandparent.listTight) {
        return;
  }
  if(entering) {
    if(!node.parent || !Node.is(node.parent, Node.BLOCK_QUOTE)) {
      this.out('.PP\n');
    }
  }else if(!entering) {
    this.out('\n');
    this.cr(2);
  }
}

function heading(node, entering) {
  if(entering) {
    if(node.level === 1) {
      this.out('.SH "');
    }else{
      this.out('.SS "');
    }
  }else{
    this.out('"\n');
  }
}

function code_block(node, entering) {
  if(entering) {
    this.out('.PP\n.in 10\n');
    this.out(manual.sanitize(node.literal));
  }else{
    this.cr(2);
  }
}

function thematic_break() {
  this.out(this.options.thematicbreak);
  this.cr(2);
}

function block_quote(node, entering) {
  if(entering) {
    this.out('.PP\n.in 10\n');
  }else{
    this.cr(2);
  }
}

function list(node, entering) {
  if(entering) {
    this.out('.BL\n');
  }else{
    this.out('.EL\n');
  }
}

function item(node, entering) {
  if(entering) {
    this.out('.IP "\\[ci]" 4\n');
  }else{
    this.out('\n');
    this.cr();
  }
}

function html_block(node, entering) {
  if(this.html) {
    if(entering) {
      this.text(node);
    }else{
      this.cr(2);
    }
  }
}

function html_inline(node, entering) {
  if(this.html) {
    if(entering) {
      this.text(node);
    }
  }
}

function custom_inline(node, entering) {
  if(entering && node.onEnter) {
    this.out(node.onEnter);
  }else if(!entering && node.onExit) {
    this.out(node.onExit);
  }
}

function custom_block(node, entering) {
  this.custom_inline(node, entering);
  this.cr(2);
}

/* Helper methods */

function cr(amount) {
  if(amount === undefined) {
    this.lit(this.newline);
  }else if(amount) {
    this.lit(repeat(this.newline, amount));
  }
}

ManRenderer.prototype = Object.create(Renderer.prototype);

ManRenderer.prototype.document = document;
ManRenderer.prototype.text = text;
ManRenderer.prototype.html_inline = html_inline;
ManRenderer.prototype.html_block = html_block;
ManRenderer.prototype.softbreak = softbreak;
ManRenderer.prototype.linebreak = linebreak;
//ManRenderer.prototype.link = link;
//ManRenderer.prototype.image = image;
ManRenderer.prototype.emph = emph;
ManRenderer.prototype.strong = strong;
ManRenderer.prototype.paragraph = paragraph;
ManRenderer.prototype.heading = heading;
ManRenderer.prototype.code = code;
ManRenderer.prototype.code_block = code_block;
ManRenderer.prototype.thematic_break = thematic_break;
ManRenderer.prototype.block_quote = block_quote;
ManRenderer.prototype.list = list;
ManRenderer.prototype.item = item;
ManRenderer.prototype.custom_inline = custom_inline;
ManRenderer.prototype.custom_block = custom_block;
ManRenderer.prototype.cr = cr;

module.exports = ManRenderer;
